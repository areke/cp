#include <bits/stdc++.h>
using namespace std;



string brute
const long long MOD = 998244353;

struct mi { // WARNING: needs some adjustment to work with FFT
 	long long v; explicit operator int() const { return v; } 
	mi():v(0) {}
	mi(long long _v):v((int)(_v%MOD)) { v += (v<0)*MOD; }
};
mi& operator+=(mi& a, mi b) { 
	if ((a.v += b.v) >= MOD) a.v -= MOD; 
	return a; }
mi& operator-=(mi& a, mi b) { 
	if ((a.v -= b.v) < 0) a.v += MOD; 
	return a; }
mi operator+(mi a, mi b) { return a += b; }
mi operator-(mi a, mi b) { return a -= b; }
mi operator*(mi a, mi b) { return mi((long long)a.v*b.v); }
mi& operator*=(mi& a, mi b) { return a = a*b; }
mi pow(mi a, long long p) { assert(p >= 0); // won't work for negative p
	return p==0?1:pow(a*a,p/2)*(p&1?a:1); }
mi inv(mi a) { assert(a.v != 0); return pow(a,MOD-2); }
mi operator/(mi a, mi b) { return a*inv(b); }
bool operator==(mi a, mi b) { return a.v == b.v; }

const int MAXN = 200000 + 5;
mi fact[MAXN], invfact[MAXN];
mi nCr(int n, int r) {
	if (r > n) return 0;
	mi res = 1;
	for (int i = n; i > n - r; i--) {
		res *= i;
	}
	res = res * invfact[r];
	return res;
}

void prepareFact() {
	fact[0] = 1;
	for (int i = 1; i < MAXN; i++) {
		fact[i] = fact[i - 1] * i;
	}
	invfact[MAXN - 1] = mi(1) / fact[MAXN - 1];
	for (int i = MAXN - 2; i >= 0; i--) {
		invfact[i] = invfact[i + 1] * (i + 1);
	}
}

mi modExp(mi a, long long b) {
	if (b == 0) return 1;
	mi res = modExp(a, b / 2);
	res *= res;
	if (b % 2) res *= a;
	return res;
}

mi dp[31][13][13][13];

void precalc() {
	
	for (int k = 2; k <= 12; k++) {
		vector<int> v(k, 0);
		for (int i = 0; i < k; i++) {
			v[i] = i + 1;
		}
		do {
			bool good = true;
			int cur = 0;
			for (int i = 0; i < k - 1; i++) {
				int mask = (1 << (i + 1)) - 1;
				cur |= (1 << (v[i] - 1));
				if (cur == mask) good = false;
			}
			if (!good) continue;
			int inv = 0;
			for (int i = 0; i < k; i++) {
				for (int j = i + 1; j < k; j++) {
					if (v[i] > v[j]) inv++; 
				}
			}
			int sw = 0;
			for (int i = 0; i < k - 1; i++) {
				if (v[i] > v[i + 1]) sw++;
			}
			if (inv > 12) continue;
			dp[k][inv][sw][1] += 1;
		} while (next_permutation(v.begin(), v.end()));
	}

	for (int i = 0; i < 13; i++) {
		for (int j = 0; j < 13; j++) {
			for (int k = 0; k < 13; k++) {
				cout << dp[i][j][k][1].v << " ";
			}
		}
	}
	cout << endl;
}



int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	prepareFact();

	if (false) {
		precalc();
		return 0;
	}
	stringstream ss(brute);
	for (int i = 0; i < 13; i++) {
		for (int j = 0; j < 13; j++) {
			for (int k = 0; k < 13; k++) {
				int x;
				ss >> x;
				dp[i][j][k][1] = x;
			}
		}
	}

	

	for (int p = 2; p <= 12; p++) {
		for (int i = 1; i <= 30; i++) {
			for (int j = 1; j <= 12; j++) {
				for (int k = 1; k <= 12; k++) {
					for (int l = 1; l <= 12; l++) {
						for (int m = 1; m <= 12; m++) {
							for (int n = 1; n <= 12; n++) {
								if (i + l > 30 || j + m > 12 || k + n > 12) continue;
								dp[i + l][j + m][k + n][p] += dp[i][j][k][p - 1] * dp[l][m][n][1];
							}
						}
					}
				}
			}
		}
	}

	int tests;
	cin >> tests;
	for (int test = 1; test <= tests; test++) {
		long long n, k, x;
		cin >> n >> k >> x;
		mi res = 0;
		for (int i = 1; i <= 30; i++) {
			for (int j = 1; j <= 12; j++) {
				res += dp[i][k][x][j] * nCr(n - i + j, j);
			}
		}
		cout << res.v << endl;
	}

	// IF STUCK:
		// DIV CONQUER?
		// CONSIDER SMALL CASES
		// INDUCTION
	return 0;
}
